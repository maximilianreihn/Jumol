using Plots
function create_toy_struct(type, rc = 2.3, rskin = 0.4, pbx = 1, pby = 1)
    """
    This function helps to avoid repetetive code inside the test files
    Different versions of structures are created in order to test the functions
    """
    else_types = ["hessian", "integration", "deform", "n_aff_deform", "aqs_tester"]
    if type == "calc"
        structure = Jumol.Structure()
        structure.rc = rc
        structure.rskin = rskin
        structure.pbx = pbx
        structure.pby = pby
        Jumol.(structure)
        Jumol.create_box_by_hand!(structure,5.0,5.0,10.0,0.0,0.0,0.0)
        Jumol.add_atom_by_hand!(structure,1,1,1.0,1.0,0.0,0.0,0.0,0.0)
        Jumol.add_atom_by_hand!(structure,2,1,3.0,2.0,0.0,0.0,0.0,0.0)
        Jumol.add_atom_by_hand!(structure,3,1,2.0,4.0,0.0,0.0,0.0,0.0)
        Jumol.add_atom_by_hand!(structure,4,1,4.0,4.0,0.0,0.0,0.0,0.0)
        Jumol.initialize_structure!(structure)
        calc_struct = Jumol.Calc(structure)
        return calc_struct
    elseif type in else_types
        molstruc = Jumol.Structure()
        molstruc.rc = rc
        molstruc.rskin = rskin
        molstruc.pbx = pbx
        molstruc.pby = pby
        if type == "aqs_tester"
            molstruc.linked_cells_bool = false
        end
        

        if type == "integration" || type == "deform"
            Jumol.create_box_by_hand!(molstruc,5.0,5.0,10.0,0.0,0.0,0.0)
            Jumol.add_atom_by_hand!(molstruc,1,1,1.0,1.0,0.0,0.0,0.0,0.0)
            Jumol.add_atom_by_hand!(molstruc,2,1,3.0,2.0,0.0,0.0,0.0,0.0)
            Jumol.add_atom_by_hand!(molstruc,3,1,2.0,4.0,0.0,0.0,0.0,0.0)
            Jumol.add_atom_by_hand!(molstruc,4,1,4.0,4.0,0.0,0.0,0.0,0.0)
            Jumol.initialize_structure!(molstruc)     
            for i in 1:molstruc.noa
                molstruc.atom_list[i].mass = 28.0855
            end
        elseif type == "n_aff_deform"
            if pwd()[length(pwd())-3:length(pwd())] == "test"
                path = "../demo_run/006_AQS_run/02_simple_shear/res/output_hist_LJ_glass.lammpstrj"
            else
                path = "demo_run/006_AQS_run/02_simple_shear/res/output_hist_LJ_glass.lammpstrj"
            end
            Jumol.read_lammpstrj!(molstruc, path, timestep_start = 1)
            Jumol.initialize_structure!(molstruc)
        elseif type == "aqs_tester"
            if pwd()[length(pwd())-3:length(pwd())] == "test"
                path =  "../demo_run/999_benchmark_samples/LJ_glass/10_10/sample_10_10_num_2.lammpstrj"
            else
                path =  "demo_run/999_benchmark_samples/LJ_glass/10_10/sample_10_10_num_2.lammpstrj"
            end
            Jumol.read_lammpstrj!(molstruc, path)
            Jumol.initialize_structure!(molstruc)
        else
            if pwd()[length(pwd())-3:length(pwd())] == "test"
                path = "../demo_run/999_benchmark_samples/2D_silica_27x27/sig_1.40/sample_2.lammpstrj"
            else
                path = "demo_run/999_benchmark_samples/2D_silica_27x27/sig_1.40/sample_2.lammpstrj"
            end
            Jumol.read_lammpstrj!(molstruc, path, timestep_start = 1)
            Jumol.initialize_structure!(molstruc)
        end
        molcalc = Jumol.Calc(molstruc)
        return molstruc, molcalc
    elseif type == "minimiser"
        molstruc = Jumol.Structure()
        molstruc.rc = rc
        molstruc.rskin = rskin
        molstruc.pbx = pbx
        molstruc.pby = pby
        
        Generate_lat = Jumol.Gen_lattice(molstruc)
        Jumol.create_LJ_lattice!(Generate_lat, 6, 3)
        Jumol.initialize_structure!(molstruc)
        molcalc = Jumol.Calc(molstruc)
        return molstruc, molcalc
    end
end


hrr_ro_mat = Matrix([1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 1.0000000000000002 1.1881909602355871 1.3660254037844388 1.5382606982861686 1.7071067811865475 1.8737387097273115 2.038841768587627; 0.0 0.0 0.0 1.1881909602355871 1.3763819204711738 1.5542163640200255 1.7264516585217553 1.8952977414221344 2.061929669962898 2.2270327288232137; 0.0 0.0 0.0 1.3660254037844388 1.5542163640200255 1.7320508075688774 1.904286102070607 2.0731321849709863 2.23976411351175 2.404867172372066; 0.0 0.0 0.0 1.5382606982861686 1.7264516585217553 1.904286102070607 2.076521396572337 2.2453674794727156 2.4119994080134797 2.5771024668737956; 0.0 0.0 0.0 1.7071067811865475 1.8952977414221344 2.0731321849709863 2.2453674794727156 2.414213562373095 2.580845490913859 2.7459485497741745; 0.0 0.0 0.0 1.8737387097273115 2.061929669962898 2.23976411351175 2.4119994080134797 2.580845490913859 2.7474774194546225 2.912580478314938; 0.0 0.0 0.0 2.038841768587627 2.2270327288232137 2.404867172372066 2.5771024668737956 2.7459485497741745 2.912580478314938 3.077683537175254])
harmring_force = Vector([1.1055728090000843, 2.2111456180001685, -0.0])
yukawa_vect = Vector([-4.273386751560133, 0.17646891855191094, -0.11868133885123178])
yukawa_params = Matrix([2.25 1.075 0.9; 1.5 -1.0 0.67])
yukawa_force = Vector([-1.6013167648592583, -0.8006583824296292, 0.0])
tersoff_params = ([1393.6  346.74  3.4879  2.2119  0.0  0.72751 38049.0  1.5724e-07  4.3484  -0.57058  1.95 0.15])
lj_prime_rc = Vector([0.0019626074770903936, 0.06953588273938421, 0.08970355041436048])
lj_rc = Vector([-0.0007526162952153444, -0.02683794823061812, -0.03502210186664681])
lj_force = Vector([0.00038264107032560544, 0.00019132053516280272, -0.0])
forces_all =  [[-43.23555265119999, 14.41185088373333, 0.0], [28.823701767466666, -43.23555265119996, 0.0], [-373.3619419916836, -8.881784197001252e-16, 0.0], [387.77379287541686, 28.823701767466662, 0.0]]
tersoff_force_all = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [3.471764734643017, 0.0, 0.0], [-3.471764734643017, 0.0, 0.0]]
harmring_force_all = [[59.700931686004566, -19.900310562001515, 0.0], [-39.80062112400302, 59.70093168600452, 0.0], [36.0, 0.0, 0.0], [-55.900310562001536, -39.800621124003015, 0.0]]
stress_tensor = [-0.09417853779661116 -0.0 -0.0; -0.0 -0.02081711794317036 -0.0; -0.0 -0.0 -0.0]
stress_tensor_b = [1.5689697349680668e-5 -0.0 -0.0; -0.0 4.9743339142328705e-6 -0.0; -0.0 -0.0 -0.0]
stress_harmring_a = [0.02347801932600118 -0.0 -0.0; -0.0 0.02874489303400219 -0.0; -0.0 -0.0 -0.0]
forces_all_b = [[0.010331308898791348, -0.0034437696329304487, 0.0], [-0.006887539265860896, 0.010331308898791348, 0.0], [0.05855044435830641, -1.0842021724855044e-19, 0.0], [-0.06199421399123688, -0.0068875392658608965, 0.0]]
hessian_mat_sum = 36306.68833719361
hessian_eig_sum = 10625.716493549255

velocities = Matrix([-1.1425482726438463e9 2.9212385111392136e9 0.0; 218.99431146405016 -229.76871020385374 0.0; -5122.38709070691 -988.8622753090806 0.0; 1.1425531760366263e9 -2.9212372925082273e9 0.0])
ring_mat_switch = Matrix([1.0 2.0 3.0 4.0 5.0 6.0 7.0; 0.003076923076923077 0.06923076923076923 0.8538461538461538 0.07230769230769231 0.0015384615384615385 0.0 0.0])

vis_fig_attr = "RecipesPipeline.DefaultsDict(:dpi => 100, :background_color_outside => :match, :plot_titlefontvalign => :vcenter, :warn_on_unsupported => true, :background_color => RGBA{Float64}(1.0,1.0,1.0,1.0), :inset_subplots => nothing, :size => (1000.0, 500.0), :display_type => :auto, :overwrite_figure => true, :html_output_format => :png, :plot_titlefontfamily => :match, :plot_titleindex => 0, :foreground_color => RGBA{Float64}(0.0,0.0,0.0,1.0), :window_title => \"Plots.jl\", :plot_titlefontrotation => 0.0, :extra_plot_kwargs => Dict{Any, Any}(), :pos => (0, 0), :plot_titlefonthalign => :hcenter, :tex_output_standalone => false, :extra_kwargs => :series, :thickness_scaling => 1, :layout => 1, :plot_titlelocation => :center, :plot_titlefontsize => 16, :plot_title => \"\", :show => false, :link => :none, :plot_titlefontcolor => :match, :plot_titlevspan => 0.05, :fontfamily => \"sans-serif\")"

lj_glass_atoms = [[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.693719696937019, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.387439393874038, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[2.081159090811057, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[2.774878787748076, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[3.468598484685095, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.34685984846850954, 0.6007788806531003, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0405795454055284, 0.6007788806531003, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.7342992423425474, 0.6007788806531003, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[2.4280189392795664, 0.6007788806531003, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[3.1217386362165853, 0.6007788806531003, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[3.8154583331536043, 0.6007788806531003, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 1.2015577613062005, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.693719696937019, 1.2015577613062005, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.387439393874038, 1.2015577613062005, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[2.081159090811057, 1.2015577613062005, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[2.774878787748076, 1.2015577613062005, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[3.468598484685095, 1.2015577613062005, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.34685984846850954, 1.8023366419593008, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0405795454055284, 1.8023366419593008, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.7342992423425474, 1.8023366419593008, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[2.4280189392795664, 1.8023366419593008, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[3.1217386362165853, 1.8023366419593008, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[3.8154583331536043, 1.8023366419593008, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 2.403115522612401, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.693719696937019, 2.403115522612401, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.387439393874038, 2.403115522612401, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[2.081159090811057, 2.403115522612401, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[2.774878787748076, 2.403115522612401, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[3.468598484685095, 2.403115522612401, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.34685984846850954, 3.0038944032655013, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0405795454055284, 3.0038944032655013, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.7342992423425474, 3.0038944032655013, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[2.4280189392795664, 3.0038944032655013, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[3.1217386362165853, 3.0038944032655013, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[3.8154583331536043, 3.0038944032655013, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]]
lj_glass_atoms_random = [[[0.4940225, 0.4940225, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.4820674999999999, 0.4940225, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[2.4701125, 0.4940225, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[3.4581575, 0.4940225, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[4.4462025, 0.4940225, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[5.4342475, 0.4940225, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.4940225, 1.4820674999999999, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.4820674999999999, 1.4820674999999999, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[2.4701125, 1.4820674999999999, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[3.4581575, 1.4820674999999999, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[4.4462025, 1.4820674999999999, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[5.4342475, 1.4820674999999999, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.4940225, 2.4701125, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.4820674999999999, 2.4701125, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[2.4701125, 2.4701125, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[3.4581575, 2.4701125, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[4.4462025, 2.4701125, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[5.4342475, 2.4701125, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]]